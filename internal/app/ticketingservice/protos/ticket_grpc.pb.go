// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ticketingservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketingServiceClient is the client API for TicketingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketingServiceClient interface {
	CreateTickets(ctx context.Context, in *TicketCreationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ticketingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketingServiceClient(cc grpc.ClientConnInterface) TicketingServiceClient {
	return &ticketingServiceClient{cc}
}

func (c *ticketingServiceClient) CreateTickets(ctx context.Context, in *TicketCreationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/TicketingService/CreateTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketingServiceServer is the server API for TicketingService service.
// All implementations must embed UnimplementedTicketingServiceServer
// for forward compatibility
type TicketingServiceServer interface {
	CreateTickets(context.Context, *TicketCreationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTicketingServiceServer()
}

// UnimplementedTicketingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketingServiceServer struct {
}

func (UnimplementedTicketingServiceServer) CreateTickets(context.Context, *TicketCreationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTickets not implemented")
}
func (UnimplementedTicketingServiceServer) mustEmbedUnimplementedTicketingServiceServer() {}

// UnsafeTicketingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketingServiceServer will
// result in compilation errors.
type UnsafeTicketingServiceServer interface {
	mustEmbedUnimplementedTicketingServiceServer()
}

func RegisterTicketingServiceServer(s grpc.ServiceRegistrar, srv TicketingServiceServer) {
	s.RegisterService(&TicketingService_ServiceDesc, srv)
}

func _TicketingService_CreateTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingServiceServer).CreateTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketingService/CreateTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingServiceServer).CreateTickets(ctx, req.(*TicketCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketingService_ServiceDesc is the grpc.ServiceDesc for TicketingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TicketingService",
	HandlerType: (*TicketingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTickets",
			Handler:    _TicketingService_CreateTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/ticket.proto",
}
